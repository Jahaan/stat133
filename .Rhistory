bridges1 <- read.table(
'bridges.data',
col.names = bridge_col_names,
colClasses = bridge_col_types,
sep = ",",
na.strings=c("?")
)
bridge_col_types <- c(
"character",
"character",
"real",
"integer",
"character",
"integer",
"integer",
"character",
"character",
"character",
"character",
"character",
"character"
)
bridges1 <- read.table(
'bridges.data',
col.names = bridge_col_names,
colClasses = bridge_col_types,
sep = ",",
na.strings=c("?")
)
bridges1 <- read.table(
'bridges.data',
col.names = bridge_col_names,
colClasses = bridge_col_types,
sep = ",",
na.strings=c("?")
)
bridges2 <- read.csv(
'bridges.data',
col.names = bridge_col_names,
colClasses = bridge_col_types,
na.strings=c("?")
)
str(bridges1)
summary(bridges1)
dim(bridges1)
names(bridges1)
colnames(bridges1)
nrow(bridges1)
player = c("Thompson", "Curry", "Green", "Durant", "Pachulia")
position = c("SG", "PG", "PF", "SF", "C")
salary = c(16663575, 12112359, 15330435, 26540100,2898000)
points = c(1742, 1999, 776, 1555, 426)
ppg = c(22.3, 25.3, 10.2, 25.1, 6.1)
rookie = c(false, false, false, false, false)
rookie = c(False, False, False, False, False)
rookie = c("FALSE","FALSE","FALSE","FALSE","FALSE")
data.frame(player,position,salary)
data.frame(player,position,salary,points,ppg, rookie)
df <- data.frame(player,position,salary,points,ppg, rookie)
class(df)
str(df)
df <- data.frame(player,position,salary,points,ppg, rookie, stringsAsFactors = "FALSE")
str(df)
cdf <- cbind(player,position,salary,points,ppg, rookie)
class(cdf)
cdf
as.data.frame(cdf)
csv <- "https://github.com/ucb-stat133/stat133-fall-2017/raw/master/data/nba2017-players.csv"
download.file(url = csv, destfile = 'nba2017-players.csv')
dat <- read.csv('nba2017-players.csv', stringsAsFactors = FALSE)
tail(dat)
tail(dat, 5)
dat[dat.height < 70]
dat.columns
dat.head
head(dat)
dat[dat.height < 70]
dat[dat['height'] < 70]
[dat['height'] < 70]
dat['height'] < 70
dat <- read.csv('nba2017-players.csv', stringsAsFactors = FALSE)
dat[dat['height'] < 70]
dat[dat$height < 70]
dat[dat$height < 70,]
dat[dat$position =="C",]["name", "salary"]
dat[dat$position =="C",]
dat[dat$position =="C",][c("name", "salary")]
dat[dat$position =="C",][,c("name", "salary")]
dat[dat$position =="C",][,c("player", "salary")]
dat[dat$player == "Kevin Durant",]
durant <- dat[dat$player == "Kevin Durant",]
dat[dat$player == "Kevin Durant"]
ucla <- dat[dat$college == "University of California, Los Angeles"]
ucla <- dat[dat$college == "University of California, Los Angeles",]
ucla
rookies <- dat[data$experience == 0]
rookies <- dat[data$experience == 0,]
rookies <- dat[dat$experience == 0,]
rookies
rookie_centers <- dat[dat$experience == 0 & dat$position == "C"]
rookie_centers <- dat[dat$experience == 0 & dat$position == "C",]
rookie_centers
top_players <- dat[dat$games > 50 & dat$minutes > 100,]
dat$height
max(dat$height)
mean(dat$height)
min(dat$height)
dat[dat$height == max(dat$height),][,c("player")]
dat[dat$height == min(dat$height),][,c("player")]
dat$team
unique(dat$team)
len(unique(dat$team))
len(c(unique(dat$team)))
c(unique(dat$team))
class(c(unique(dat$team)))
count.fields(unique(dat$team))
as.list(unique(dat$team))
len(as.list(unique(dat$team)))
length(as.list(unique(dat$team)))
dat[dat$age == max(dat$age),][,c("player")]
median(dat$salary)
median(dat[dat$experience >=10]$salary)
dat[dat$experience >=10][$salary]
dat[dat$experience >=10]$salary
dat[dat$experience >=10]
dat$experience
dat$experience >= 10
dat[dat$experience >= 10,]
dat[dat$experience >= 10,]$salary
median(dat[dat$experience >= 10,]$salary)
median(dat[dat$position == "PG" | dat$position == "SG" ,]$salary)
median(dat[dat$position == "PF" & dat$height <= 74 &dat$age >=29 ,]$salary)
dat[dat$points <= 4]
dat[dat$points <= 4,]
dim(dat[dat$points <= 4,])
dim(dat[dat$points <= 4,])[0]
dat[dat$points <= 4,]$player
dat[dat$points == 4,]$player
dat[dat$points == 0,]$player
dim(dat[dat$college == "University of California, Berkeley",])
dim(dat[dat$college == "University of California, Berkeley",])
dim(dat[dat$college == "University of Notre Dame",])
dat[dat$weight > 260,]
dat[dat$weight > 260,]$player
dat
dim(dat[dat$college == "",])
dat[,"points"]/dat[,"minutes"]
max(dat[,"points"]/dat[,"minutes"])
dat[dat$points/dat$minutes == max(dat[,"points"]/dat[,"minutes"]),]
dat[dat$points/dat$minutes == max(dat[,"points"]/dat[,"minutes"]),]$player
dat[dat$points/dat$minutes == max(dat[,"3points"]/dat[,"minutes"]),]$player
dat[dat$points/dat$minutes == max(dat[,"points3"]/dat[,"minutes"]),]$player
dat[dat$points3/dat$minutes == max(dat[,"points3"]/dat[,"minutes"]),]$player
dat[dat$points2/dat$minutes == max(dat[,"points2"]/dat[,"minutes"]),]$player
dat[dat$points1/dat$minutes == max(dat[,"points1"]/dat[,"minutes"]),]$player
gsw <- dat[dat$team == "GSW",][c("name", "height", "weight")]
gsw <- dat[dat$team == "GSW",],[c("name", "height", "weight")]
gsw <- dat[dat$team == "GSW",][,c("name", "height", "weight")]
gsw <- dat[dat$team == "GSW",][c("name", "height", "weight"),]
gsw
gsw <- dat[dat$team == "GS",][c("name", "height", "weight"),]
gsw
gsw <- dat[dat$team == "GS",][c("player", "height", "weight"),]
gsw
gsw <- dat[dat$team == "GS",][c("player", "height", "weight")]
gsw
gsw <- dat[dat$team == "GS",][,c("player", "height", "weight")]
gsw
dat[dat$team == "GS",]
gsw <- dat[dat$team == "GSW",][,c("player", "height", "weight")]
gsw
?sort
sort.int(gsw, partial= "height")
sort.int(gsw$height, partial= "height")
gsw[order(gsw[2])]
gsw[order(gsw$height)]
gsw[order(gsw$height),]
gsw[order(-gsw$height),]
dat[tail(sort(dat$salary),5)]
dat[tail(sort(dat$salary),5),]
tail(sort(dat$salary),5)
dat[dat$salary >= min(tail(sort(a),5))]
dat[dat$salary >= min(tail(sort(dat$salary),5)),]
dat[dat$salary >= min(tail(sort(dat$salary),5)),][,c("player", "team", "salary")]
dat[dat$points3 >= min(tail(sort(dat$points3),10)),][,c("player", "team", "points3")]
aggregate(dat[ ,c('height', 'weight', 'age')], by = list(dat$position), FUN = mean)
aggregate(dat[ ,c('height', 'weight', 'age')], by = list(dat$team), FUN = mean)
aggregate(dat[ ,c('height', 'weight', 'age')], by = list(dat$team, dat$position), FUN = mean)
min_sal <- aggregate(dat[ dat$salary, by = list(dat$team, dat$position), FUN = min)
min_sal <- aggregate(dat$salary, by = list(dat$team, dat$position), FUN = min)
med_sal <- aggregate(dat$salary, by = list(dat$team, dat$position), FUN = median)
max_sal <- aggregate(dat$salary, by = list(dat$team, dat$position), FUN = max)
final <- cbind(min_sal, med_sal, max_sal)
final
max_sal <- aggregate(dat$salary, by = list(dat$team, dat$position), FUN = [max,min])
max_sal <- aggregate(dat$salary, by = list(dat$team, dat$position), FUN = function(x) c(med = median(x), min = min(x), max = max(x) ))
max_sal
knitr::opts_chunk$set(echo = TRUE)
# What's the character delimiter?
#Commas
# Is there a row for column names?
#No
# Are there any missing values? If so, how are they codified?
#Doesn't seem to be
# What is the data type of each column?
#char, double, double ... double, int
url <- "http://archive.ics.uci.edu/ml/machine-learning-databases/abalone/abalone.data"
abalone <- read.table(url, sep = ",")
abalone <- read.table("abalone.data", sep = ",")
head(abalone)
tail(abalone)
str(abalone, vec.len = 1)
column_names <- c(
'sex',
'length',
'diameter',
'height',
'whole_weight',
'shucked_weight',
'viscera_weight',
'shell_weight',
'rings'
)
column_types <- c(
'character',
'real',
'real',
'real',
'real',
'real',
'real',
'real',
'integer'
)
abalone <- read.table(
'abalone.data',
col.names = column_names,
colClasses = column_types,
sep = ","
)
abalone <- read.csv(
'abalone.data',
col.names = column_names,
colClasses = column_types
)
numeric_names <- c(
'length',
'diameter',
'height',
'whole_weight',
'shucked_weight',
'viscera_weight',
'shell_weight',
'rings'
)
numeric_df <- abalone[numeric_names]
min <- sapply(numeric_df, min)
max <- sapply(numeric_df, max)
sd <- sapply(numeric_df, sd)
mean <- sapply(numeric_df, mean)
rbind(min, max, sd, mean)
library(readr)
ab_csv <- read_csv('abalone.data')
ab_csv_col_names <- read_csv('abalone.data', col_names = column_names)
col_type_list = as.list(c(col_character(), col_double(),col_double(),col_double(),col_double(),col_double(),col_double(),col_double(),col_integer() ))
read_csv('abalone.data', col_names = column_names, col_types = col_type_list)
# Are there column names?
#No
# What is the field separator?
#Comma
# Are there any missing values?
#Yes
# What is the character for missing values (if any)?
#?
# What is the data type of each variable (i.e. column)?
#str, chr, int, int, str, int, chr, str, str, str, chr, str
url <- 'http://archive.ics.uci.edu/ml/machine-learning-databases/bridges/bridges.data.version1'
pitt <- read.table(url, sep = ",")
bridge_col_names <- c(
"IDENTIFIER",
"RIVER",
"LOCATION",
"ERECTED",
"PURPOSE",
"LENGTH",
"LANES",
"CLEAR-G",
"T-OR-D",
"MATERIAL",
"SPAN",
"REL-L",
"TYPE"
)
bridge_col_types <- c(
"character",
"character",
"real",
"integer",
"character",
"integer",
"integer",
"character",
"character",
"character",
"character",
"character",
"character"
)
bridges1 <- read.table(
'bridges.data',
col.names = bridge_col_names,
colClasses = bridge_col_types,
sep = ",",
na.strings=c("?")
)
bridges2 <- read.csv(
'bridges.data',
col.names = bridge_col_names,
colClasses = bridge_col_types,
na.strings=c("?")
)
str(bridges1)
summary(bridges1)
head(bridge1)
# What's the character delimiter?
#Commas
# Is there a row for column names?
#No
# Are there any missing values? If so, how are they codified?
#Doesn't seem to be
# What is the data type of each column?
#char, double, double ... double, int
url <- "http://archive.ics.uci.edu/ml/machine-learning-databases/abalone/abalone.data"
abalone <- read.table(url, sep = ",")
abalone <- read.table("abalone.data", sep = ",")
head(abalone)
tail(abalone)
str(abalone, vec.len = 1)
column_names <- c(
'sex',
'length',
'diameter',
'height',
'whole_weight',
'shucked_weight',
'viscera_weight',
'shell_weight',
'rings'
)
column_types <- c(
'character',
'real',
'real',
'real',
'real',
'real',
'real',
'real',
'integer'
)
abalone <- read.table(
'abalone.data',
col.names = column_names,
colClasses = column_types,
sep = ","
)
abalone <- read.csv(
'abalone.data',
col.names = column_names,
colClasses = column_types
)
numeric_names <- c(
'length',
'diameter',
'height',
'whole_weight',
'shucked_weight',
'viscera_weight',
'shell_weight',
'rings'
)
numeric_df <- abalone[numeric_names]
min <- sapply(numeric_df, min)
max <- sapply(numeric_df, max)
sd <- sapply(numeric_df, sd)
mean <- sapply(numeric_df, mean)
rbind(min, max, sd, mean)
library(readr)
ab_csv <- read_csv('abalone.data')
ab_csv_col_names <- read_csv('abalone.data', col_names = column_names)
col_type_list = as.list(c(col_character(), col_double(),col_double(),col_double(),col_double(),col_double(),col_double(),col_double(),col_integer() ))
read_csv('abalone.data', col_names = column_names, col_types = col_type_list)
# Are there column names?
#No
# What is the field separator?
#Comma
# Are there any missing values?
#Yes
# What is the character for missing values (if any)?
#?
# What is the data type of each variable (i.e. column)?
#str, chr, int, int, str, int, chr, str, str, str, chr, str
url <- 'http://archive.ics.uci.edu/ml/machine-learning-databases/bridges/bridges.data.version1'
pitt <- read.table(url, sep = ",")
bridge_col_names <- c(
"IDENTIFIER",
"RIVER",
"LOCATION",
"ERECTED",
"PURPOSE",
"LENGTH",
"LANES",
"CLEAR-G",
"T-OR-D",
"MATERIAL",
"SPAN",
"REL-L",
"TYPE"
)
bridge_col_types <- c(
"character",
"character",
"real",
"integer",
"character",
"integer",
"integer",
"character",
"character",
"character",
"character",
"character",
"character"
)
bridges1 <- read.table(
'bridges.data',
col.names = bridge_col_names,
colClasses = bridge_col_types,
sep = ",",
na.strings=c("?")
)
bridges2 <- read.csv(
'bridges.data',
col.names = bridge_col_names,
colClasses = bridge_col_types,
na.strings=c("?")
)
str(bridges1)
summary(bridges1)
head(bridges1)
tail(bridges1)
dim(bridges1)
names(bridges1)
colnames(bridges1)
nrow(bridges1)
ncol(bridges1)
player = c("Thompson", "Curry", "Green", "Durant", "Pachulia")
position = c("SG", "PG", "PF", "SF", "C")
salary = c(16663575, 12112359, 15330435, 26540100,2898000)
points = c(1742, 1999, 776, 1555, 426)
ppg = c(22.3, 25.3, 10.2, 25.1, 6.1)
rookie = c("FALSE","FALSE","FALSE","FALSE","FALSE")
df <- data.frame(player,position,salary,points,ppg, rookie)
class(df)
str_df <- data.frame(player,position,salary,points,ppg, rookie, stringsAsFactors = "FALSE")
str(str_df)
cdf <- cbind(player,position,salary,points,ppg, rookie)
class(cdf)
as.data.frame(cdf)
dat <- read.csv('nba2017-players.csv', stringsAsFactors = FALSE)
tail(dat, 5)
dat[dat$height < 70,]
dat[dat$position =="C",][,c("player", "salary")]
durant <- dat[dat$player == "Kevin Durant",]
ucla <- dat[dat$college == "University of California, Los Angeles",]
rookies <- dat[dat$experience == 0,]
rookie_centers <- dat[dat$experience == 0 & dat$position == "C",]
top_players <- dat[dat$games > 50 & dat$minutes > 100,]
max(dat$height) #87
min(dat$height) #69
mean(dat$height) #79.15
dat[dat$height == max(dat$height),][,c("player")]
#"Edy Tavares"        "Boban Marjanovic"   "Kristaps Porzingis"
dat[dat$height == min(dat$height),][,c("player")]
#"Isaiah Thomas" "Kay Felder"
unique(dat$team)
length(as.list(unique(dat$team)))
dat[dat$age == max(dat$age),][,c("player")]
median(dat$salary)
median(dat[dat$experience >= 10,]$salary)
median(dat[dat$position == "PG" | dat$position == "SG" ,]$salary)
#There are none
dim(dat[dat$points <= 4,]) #7
dat[dat$points <= 4,]$player
#  "Patricio Garino"
#none from Berkeley
dim(dat[dat$college == "University of Notre Dame",]) #3
dat[dat$weight > 260,]$player #21 of them
dim(dat[dat$college == "",]) #85
dat[dat$points/dat$minutes == max(dat[,"points"]/dat[,"minutes"]),]$player #westbrook
dat[dat$points3/dat$minutes == max(dat[,"points3"]/dat[,"minutes"]),]$player #steph
dat[dat$points2/dat$minutes == max(dat[,"points2"]/dat[,"minutes"]),]$player #JaVale McGee
dat[dat$points1/dat$minutes == max(dat[,"points1"]/dat[,"minutes"]),]$player #westbrook again
gsw <- dat[dat$team == "GSW",][,c("player", "height", "weight")]
gsw[order(gsw$height),]
gsw[order(-gsw$height),]
dat[dat$salary >= min(tail(sort(dat$salary),5)),][,c("player", "team", "salary")]
dat[dat$points3 >= min(tail(sort(dat$points3),10)),][,c("player", "team", "points3")]
aggregate(dat[ ,c('height', 'weight', 'age')], by = list(dat$position), FUN = mean)
aggregate(dat[ ,c('height', 'weight', 'age')], by = list(dat$team), FUN = mean)
aggregate(dat[ ,c('height', 'weight', 'age')], by = list(dat$team, dat$position), FUN = mean)
aggregate(dat$salary, by = list(dat$team, dat$position), FUN = function(x) c(med = median(x), min = min(x), max = max(x) ))
